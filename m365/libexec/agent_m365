#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Copyright (C) 2024  Christopher Pommer <cp.software@outlook.de>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


import sys
import argparse
import json
from pathlib import Path

import requests

import cmk.utils.password_store


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--tenant-id",
        dest="tenant_id",
        required=True,
        help="The unique ID from the Microsoft Entra tenant.",
    )
    parser.add_argument(
        "--app-id",
        dest="app_id",
        required=True,
        help="The ID of the Micrsoft Entra app registration for Microsoft Graph API requests.",
    )
    parser.add_argument(
        "--app-secret",
        dest="app_secret",
        required=True,
        help="The client secret from the Microsoft Entra app registration.",
    )
    parser.add_argument(
        "--services-to-monitor",
        dest="services_to_monitor",
        required=False,
        help="Microsoft 365 services that you want to monitor.",
    )

    return parser.parse_args()


def get_access_token(tenant_id, app_id, app_secret, resource_scope):
    token_url = "https://login.microsoftonline.com/" + tenant_id + "/oauth2/v2.0/token"

    headers = {"Content-Type": "application/x-www-form-urlencoded"}

    body = {
        "client_id": app_id,
        "client_secret": app_secret,
        "grant_type": "client_credentials",
        "scope": resource_scope,
    }

    try:
        api_response = requests.post(token_url, headers=headers, data=body)
        api_response.raise_for_status()
    except requests.exceptions.RequestException as err:
        sys.stderr.write("CRITICAL | Failed to get access token\n")
        sys.stderr.write(f"Error: {err}\n")
        sys.exit(1)

    api_response_json = api_response.json()
    access_token = api_response_json["access_token"]

    return access_token


def get_m365_service_health(token):
    m365_healt_overview_url = "https://graph.microsoft.com/v1.0/admin/serviceAnnouncement/healthOverviews/"

    headers = {"Authorization": "Bearer " + token}

    try:
        m365_health_overview_response = requests.get(m365_healt_overview_url, headers=headers)
        m365_health_overview_response.raise_for_status()
    except requests.exceptions.RequestException as err:
        sys.stderr.write("CRITICAL | Failed to get m365 service overview\n")
        sys.stderr.write(f"Error: {err}\n")
        sys.exit(2)

    m365_health_overview = m365_health_overview_response.json().get("value", [])

    m365_health_issues_url = (
        "https://graph.microsoft.com/v1.0/admin/serviceAnnouncement/issues"
        "?$filter=isResolved eq false"
        "&$select=service,title,startDateTime,feature,classification,id"
        "&$orderby=startDateTime desc"
    )

    try:
        m365_health_issues_response = requests.get(m365_health_issues_url, headers=headers)
        m365_health_issues_response.raise_for_status()
    except requests.exceptions.RequestException as err:
        sys.stderr.write("CRITICAL | Failed to get m365 service issues\n")
        sys.stderr.write(f"Error: {err}\n")
        sys.exit(3)

    m365_health_issues = m365_health_issues_response.json().get("value", [])

    service_list = []
    for service in m365_health_overview:
        service_name = service["service"]
        issue_list = []
        for issue in m365_health_issues:
            if service_name == issue["service"]:
                issue_dict = {
                    "issue_title": issue.get("title"),
                    "issue_start": issue.get("startDateTime"),
                    "issue_feature": issue.get("feature"),
                    "issue_classification": issue.get("classification"),
                    "issue_id": issue.get("id"),
                }

                issue_list.append(issue_dict)

        service_dict = {
            "service_name": service_name,
            "service_status": service.get("status"),
            "service_issues": issue_list,
        }

        service_list.append(service_dict)

    return service_list


def get_m365_licenses(token):
    m365_licenses_url = (
        "https://graph.microsoft.com/v1.0/subscribedSkus"
        "?$select=skuId,skuPartNumber,capabilityStatus,consumedUnits,prepaidUnits"
    )

    headers = {"Authorization": "Bearer " + token}

    try:
        m365_licenses_response = requests.get(m365_licenses_url, headers=headers)
        m365_licenses_response.raise_for_status()
    except requests.exceptions.RequestException as err:
        print(m365_licenses_response.text)
        sys.stderr.write("CRITICAL | Failed to get m365 licenses\n")
        sys.stderr.write(f"Error: {err}\n")
        sys.exit(4)

    m365_licenses = m365_licenses_response.json().get("value", [])

    license_list = []
    for license in m365_licenses:
        lic_units = license["prepaidUnits"]
        if license["capabilityStatus"] in ["Enabled", "Warning"]:
            license_dict = {
                "lic_sku_id": license["skuId"],
                "lic_sku_name": license["skuPartNumber"],
                "lic_state": license["capabilityStatus"],
                "lic_units_consumed": license["consumedUnits"],
                "lic_units_enabled": lic_units["enabled"],
                "lic_units_lockedout": lic_units["lockedOut"],
                "lic_units_suspended": lic_units["suspended"],
                "lic_units_warning": lic_units["warning"],
            }

            license_list.append(license_dict)

    return license_list


def main():
    args = parse_arguments()
    tenant_id = args.tenant_id
    app_id = args.app_id
    services_to_monitor = args.services_to_monitor.split(",") if args.services_to_monitor else None

    pw_id, pw_path = args.app_secret.split(":")
    app_secret = cmk.utils.password_store.lookup(Path(pw_path), pw_id)

    resource_scope = "https://graph.microsoft.com/.default"

    token = get_access_token(tenant_id, app_id, app_secret, resource_scope)

    # if not services_to_monitor or "m365_service_health" in services_to_monitor:
    if "m365_service_health" in services_to_monitor:
        print("<<<m365_service_health:sep(0)>>>")
        print(json.dumps(get_m365_service_health(token)))

    if "m365_licenses" in services_to_monitor:
        print("<<<m365_licenses:sep(0)>>>")
        print(json.dumps(get_m365_licenses(token)))


if __name__ == "__main__":
    main()
