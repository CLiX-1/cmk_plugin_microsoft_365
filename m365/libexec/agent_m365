#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4; max-line-length: 100 -*-

# Copyright (C) 2024, 2025  Christopher Pommer <cp.software@outlook.de>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


####################################################################################################
# This Checkmk plugin (Special Agent) retrieves information from Microsoft 365 using the Microsoft
# Graph API. The plugin can be used to monitor the group-based licensing, service health and
# licenses of Microsoft 365 services.


import sys
import argparse
import json
from pathlib import Path
from typing import List, Optional, TypedDict

import requests

import cmk.utils.password_store
from cmk.utils.http_proxy_config import deserialize_http_proxy_config, HTTPProxyConfig


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--tenant-id", required=True, help="The unique ID from the Microsoft Entra tenant."
    )
    parser.add_argument(
        "--app-id",
        required=True,
        help="The App ID of the Microsoft Entra app registration for Microsoft Graph API requests.",
    )
    parser.add_argument(
        "--app-secret",
        required=True,
        help="The client secret from the Microsoft Entra app registration.",
    )
    parser.add_argument(
        "--proxy",
        required=False,
        help=(
            "The HTTP proxy used to connect to the Microsoft Graph API. If not set, the "
            "environment settings will be used."
        ),
    )
    parser.add_argument(
        "--services-to-monitor",
        required=False,
        help=(
            "Comma-separated list of Microsoft Entra services you want to monitor. "
            "Possible values: m365_group_based_licensing, m365_service_health, m365_licenses"
        ),
    )
    parser.add_argument(
        "--timeout",
        required=False,
        type=float,
        default=10.0,
        help=(
            "Define a custom timeout in seconds to use for each API request. The "
            "timeout is used for token request and any service that should be "
            "monitored. The default timeout is 10s."
        ),
    )

    return parser.parse_args()


def handle_error(err: Exception, context: str, exit_code: int = 1) -> None:
    err_msg = f"{err}"
    if getattr(err, "response", None) and err.response.text:
        err_msg += f"Response: {err.response.text}"

    sys.stderr.write(f"{err_msg}\n\n{context}\n")

    sys.exit(exit_code)


def get_access_token(
    tenant_id: str,
    app_id: str,
    app_secret: str,
    resource_scope: str,
    timeout: float,
    proxy: Optional[HTTPProxyConfig],
) -> str:
    token_url = f"https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token"

    headers = {"Content-Type": "application/x-www-form-urlencoded"}

    body = {
        "client_id": app_id,
        "client_secret": app_secret,
        "grant_type": "client_credentials",
        "scope": resource_scope,
    }

    try:
        api_response = requests.post(
            token_url,
            headers=headers,
            data=body,
            timeout=timeout,
            proxies=proxy.to_requests_proxies(),
        )
        api_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting access token.",
            11,
        )
    except requests.exceptions.RequestException as err:
        handle_error(
            err, "Failed to get access token. Please check your connection configuration.", 1
        )

    api_response_json = api_response.json()
    access_token = api_response_json["access_token"]

    return access_token


class Group(TypedDict):
    group_id: str
    group_name: str


def get_m365_group_based_licensing(
    token: str, timeout: float, proxy: Optional[HTTPProxyConfig]
) -> List[Group]:
    m365_licenses_url = (
        "https://graph.microsoft.com/v1.0/groups?$filter=hasMembersWithLicenseErrors+eq+true"
        "&$select=displayName,id"
    )

    headers = {"Authorization": "Bearer " + token}

    try:
        m365_group_based_licensing_response = requests.get(
            m365_licenses_url, headers=headers, timeout=timeout, proxies=proxy.to_requests_proxies()
        )
        m365_group_based_licensing_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting M365 group-based licensing errors.",
            12,
        )
    except requests.exceptions.RequestException as err:
        handle_error(
            err,
            "Failed to get M365 group-based licensing errors. Please check your application "
            "permissions.",
            2,
        )

    m365_groups = m365_group_based_licensing_response.json().get("value", [])

    group_list = [
        {
            "group_id": group["id"],
            "group_name": group["displayName"],
        }
        for group in m365_groups
    ]

    return group_list


class License(TypedDict):
    lic_sku_id: str
    lic_sku_name: str
    lic_state: str
    lic_units_consumed: int
    lic_units_enabled: int
    lic_units_lockedout: int
    lic_units_suspended: int
    lic_units_warning: int


def get_m365_licenses(
    token: str, timeout: float, proxy: Optional[HTTPProxyConfig]
) -> List[License]:
    m365_licenses_url = (
        "https://graph.microsoft.com/v1.0/subscribedSkus"
        "?$select=skuId,skuPartNumber,capabilityStatus,consumedUnits,prepaidUnits"
    )

    headers = {"Authorization": "Bearer " + token}

    try:
        m365_licenses_response = requests.get(
            m365_licenses_url, headers=headers, timeout=timeout, proxies=proxy.to_requests_proxies()
        )
        m365_licenses_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting M365 licenses.",
            13,
        )
    except requests.exceptions.RequestException as err:
        handle_error(
            err,
            "Failed to get M365 licenses. Please check your application permissions.",
            3,
        )

    m365_licenses = m365_licenses_response.json().get("value", [])

    license_list = [
        {
            "lic_sku_id": license["skuId"],
            "lic_sku_name": license["skuPartNumber"],
            "lic_state": license["capabilityStatus"],
            "lic_units_consumed": license["consumedUnits"],
            "lic_units_enabled": license["prepaidUnits"]["enabled"],
            "lic_units_lockedout": license["prepaidUnits"]["lockedOut"],
            "lic_units_suspended": license["prepaidUnits"]["suspended"],
            "lic_units_warning": license["prepaidUnits"]["warning"],
        }
        for license in m365_licenses
        if license["capabilityStatus"] in ["Enabled", "Warning"]
    ]

    return license_list


class ServiceIssue(TypedDict):
    issue_title: str
    issue_start: str
    issue_feature: str
    issue_classification: str
    issue_id: str


class MicrosoftService(TypedDict):
    service_name: str
    service_status: str
    service_issues: List[ServiceIssue]


def get_m365_service_health(
    token: str, timeout: float, proxy: Optional[HTTPProxyConfig]
) -> List[MicrosoftService]:
    m365_healt_overview_url = (
        "https://graph.microsoft.com/v1.0/admin/serviceAnnouncement/healthOverviews"
    )

    headers = {"Authorization": "Bearer " + token}

    try:
        m365_health_overview_response = requests.get(
            m365_healt_overview_url,
            headers=headers,
            timeout=timeout,
            proxies=proxy.to_requests_proxies(),
        )
        m365_health_overview_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting M365 service health overview.",
            14,
        )
    except requests.exceptions.RequestException as err:
        handle_error(
            err,
            "Failed to get M365 service health overview. Please check your application "
            "permissions.",
            4,
        )

    m365_health_overview = m365_health_overview_response.json().get("value", [])

    m365_health_issues_url = (
        "https://graph.microsoft.com/v1.0/admin/serviceAnnouncement/issues"
        "?$filter=isResolved eq false"
        "&$select=service,title,startDateTime,feature,classification,id"
        "&$orderby=startDateTime desc"
    )

    try:
        m365_health_issues_response = requests.get(
            m365_health_issues_url,
            headers=headers,
            timeout=timeout,
            proxies=proxy.to_requests_proxies(),
        )
        m365_health_issues_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting M365 service issues.",
            15,
        )
    except requests.exceptions.RequestException as err:
        handle_error(
            err,
            "Failed to get M365 service issues. Please check your application permissions.",
            5,
        )

    m365_health_issues = m365_health_issues_response.json().get("value", [])

    service_list = []
    for service in m365_health_overview:
        service_name = service["service"]
        issue_list = []
        for issue in m365_health_issues:
            if service_name == issue["service"]:
                issue_dict = {
                    "issue_classification": issue.get("classification"),
                    "issue_feature": issue.get("feature"),
                    "issue_id": issue.get("id"),
                    "issue_start": issue.get("startDateTime"),
                    "issue_title": issue.get("title"),
                }

                issue_list.append(issue_dict)

        service_dict = {
            "service_issues": issue_list,
            "service_name": service_name,
            "service_status": service.get("status"),
        }

        service_list.append(service_dict)

    service_dict = {
        service["service"]: {
            "service_name": service["service"],
            "service_status": service.get("status"),
            "service_issues": [],
        }
        for service in m365_health_overview
    }

    for issue in m365_health_issues:
        service_name = issue["service"]
        if service_name in service_dict:
            issue_dict = {
                "issue_classification": issue.get("classification"),
                "issue_feature": issue.get("feature"),
                "issue_id": issue.get("id"),
                "issue_start": issue.get("startDateTime"),
                "issue_title": issue.get("title"),
            }
            service_dict[service_name]["service_issues"].append(issue_dict)

    service_list = list(service_dict.values())

    return service_list


def main():
    args = parse_arguments()
    tenant_id = args.tenant_id
    app_id = args.app_id
    proxy = deserialize_http_proxy_config(args.proxy)
    services_to_monitor = args.services_to_monitor.split(",") if args.services_to_monitor else None
    timeout = args.timeout

    pw_id, pw_path = args.app_secret.split(":")
    app_secret = cmk.utils.password_store.lookup(Path(pw_path), pw_id)

    resource_scope = "https://graph.microsoft.com/.default"

    token = get_access_token(tenant_id, app_id, app_secret, resource_scope, timeout, proxy)

    if "m365_group_based_licensing" in services_to_monitor:
        print("<<<m365_group_based_licensing:sep(0)>>>")
        print(json.dumps(get_m365_group_based_licensing(token, timeout, proxy)))

    if "m365_licenses" in services_to_monitor:
        print("<<<m365_licenses:sep(0)>>>")
        print(json.dumps(get_m365_licenses(token, timeout, proxy)))

    if "m365_service_health" in services_to_monitor:
        print("<<<m365_service_health:sep(0)>>>")
        print(json.dumps(get_m365_service_health(token, timeout, proxy)))


if __name__ == "__main__":
    main()
